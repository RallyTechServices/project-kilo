<!DOCTYPE html>
<html>
<head>
    <title>Portfolio Reporting App</title>
    <!--  (c) 2017 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Thu Jun 22 2017 13:48:15 GMT-0700 (PDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Thu Jun 22 2017 13:48:15 GMT-0700 (PDT)";
        var STORY    = "F182";
        var BUILDER  = "rajan08";
        var CHECKSUM = 21017703970;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>
    <!-- our highcharts (needed so that we can add patterns) 
    <script type="text/javascript" src="/apps/2.1/lib/analytics/analytics-all.js"></script>
    -->
    
    
    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350,
    
    informationalConfig: null,
    
    items: [{xtype:'container', itemId:'information' }],
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/var BUILDER  = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
       
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
   
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    var stored_checksum = me._generateChecksum(text);
                    if ( CHECKSUM !== stored_checksum ) {
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    _addToContainer: function(container){
        var config = Ext.apply({
            xtype:'container',
            height: 200,
            overflowY: true
        }, this.informationalConfig);
        
        container.add(config);
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if ( !Ext.isEmpty( this.informationalConfig ) ) {
            var container = this.down('#information');
            this._addToContainer(container);
            
        }
        
        if (! app.isExternal() ) {
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            dock: 'bottom',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml,
                doc: 'top'
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            dock:'bottom',
            html:"This app was created by the CA AC Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            var build_html = Ext.String.format("Built on: {0} <br/>Built by: {1}",
                APP_BUILD_DATE,
                BUILDER);
                
            if ( STORY ) {
                build_html = build_html + "<br/>Source story: " + STORY;
            }
                
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html: build_html
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('CArABU.technicalservices.chunk.Store',{

    MAX_CHUNK_SIZE: 50,
    logger: new Rally.technicalservices.Logger(),

    constructor: function(config) {
        this.chunkProperty = config.chunkProperty;
        this.chunkValue = config.chunkValue;

        this.storeConfig = config.storeConfig || {};
        this.storeType = config.storeType || 'Rally.data.wsapi.Store';

    },
    load: function(){
        var deferred = Ext.create('Deft.Deferred');

        var promises = [],
            chunkArray = this.chunkValue,
            config = this.storeConfig;

        for (var i=0; i < chunkArray.length; i = i+this.MAX_CHUNK_SIZE){
            var chunk = Ext.Array.slice(chunkArray, i, i + this.MAX_CHUNK_SIZE);
            promises.push(this._fetchChunk(chunk, config));
        }

        Deft.Promise.all(promises).then({
            success: function(results){
                var records = _.flatten(results);
                this.logger.log('load SUCCESS results', results,records);
                deferred.resolve(records);
            },
            failure: function(msg){
                this.logger.log('load FAILURE', chunkArray, msg);
                deferred.reject(msg);
            },
            scope: this
        });


        return deferred;
    },

    _fetchChunk: function(objectIDs, config){
        this.logger.log('chunk.Store._fetchChunk',objectIDs, config);
        var deferred = Ext.create('Deft.Deferred');

        var chunkProperty = this.chunkProperty,
            filters = _.map(objectIDs, function(o){ return {
                property: chunkProperty,
                value: o
            }
        });
        filters = Rally.data.wsapi.Filter.or(filters);


        if (config.filters){
            if (Ext.isArray(config.filters)){
                config.filters  = Rally.data.wsapi.Filter.and(config.filters);
            }
            filters = filters.and(config.filters);
        }
        this.logger.log('chunk.Store._fetchChunk',filters.toString());

        var fetch = config.fetch || true,
            model = config.model || 'HierarchicalRequirement';

        Ext.create(this.storeType,{
            fetch: fetch,
            filters: filters,
            model: model,
            context: {project: null}
        }).load({
            callback: function(records, operation, success){
                if (success){
                    deferred.resolve(records);
                } else {
                    var msg = "Failure loading records for objectIDs: " + objectIDs.join(', ') + ":  " + operation.error.errors.join(',');
                    deferred.resolve(msg);
                }
            }
        });
        return deferred;
    }

});
Ext.override(Rally.data.wsapi.TreeStore,{
    _decorateModels: function() {
        var models = this.model;

        if (_.isFunction(models.getArtifactComponentModels)) {
            models = models.getArtifactComponentModels();
        }

        Ext.Array.each(models, function(m){
            m.addField({name: 'Diff', type: 'auto',  defaultValue: 0});

            if (m.typePath.indexOf("portfolioitem/") != -1){
                //m.addField({name: 'PlanEstimate', type: 'auto',  defaultValue: 0, modelType: m.typePath});
                m.addField({name: 'Estimate', type: 'auto',  defaultValue: 0, modelType: m.typePath});
                m.addField({name: 'TimeSpent', type: 'auto', defaultValue: 0, modelType: m.typePath});
                m.addField({name: 'ToDo', type: 'auto',  defaultValue: 0, modelType: m.typePath});
            }
            if (m.typePath.indexOf("hierarchicalrequirement") != -1){
                m.addField({name: 'Estimate', type: 'auto',  defaultValue: 0, modelType: m.typePath});
                m.addField({name: 'TimeSpent', type: 'auto',  defaultValue: 0, modelType: m.typePath});
                m.addField({name: 'ToDo', type: 'auto',  defaultValue: 0, modelType: m.typePath});
                m.addField({name: 'AcceptedLeafStoryPlanEstimateTotal', type: 'auto', defaultValue: 0, modelType: m.typePath});
                m.addField({name: 'LeafStoryPlanEstimateTotal', type: 'auto',defaultValue: 0, modelType: m.typePath});
            }            
        });

        _.each(Ext.Array.from(models), Rally.ui.grid.data.NodeInterface.decorate, Rally.ui.grid.data.NodeInterface);
    }
});

Ext.override(Rally.ui.renderer.template.ScheduleStateTemplate, {
    _getSymbolState: function(recordData, state) {
        var symbolState;
        if (recordData.ScheduleStatePrefix) {
            //
            // if (!recordData.isDirty || this._isCreate(recordData)) {
            //      symbolState = recordData.ScheduleStatePrefix;
            // }  else {
            //     symbolState = '';
            // }
            // overriding this as the record gets dirty after adding the task estimate to UserStory and PortfolioItems
            
            symbolState = recordData.ScheduleStatePrefix;
            
        } else {
            symbolState = state === 'In-Progress' ? 'P' : state.charAt(0);
        }
        return symbolState;
    }
});

Ext.override(Rally.ui.grid.TreeGrid, {
    _mergeColumnConfigs: function(newColumns, oldColumns) {

        var mergedColumns= _.map(newColumns, function(newColumn) {
            var oldColumn = _.find(oldColumns, {dataIndex: this._getColumnName(newColumn)});
            if (oldColumn) {
                return this._getColumnConfigFromColumn(oldColumn);
            }

            return newColumn;
        }, this);
        mergedColumns = mergedColumns.concat(this.config.derivedColumns);
        return mergedColumns;
    },
    _restoreColumnOrder: function(columnConfigs) {

        var currentColumns = this._getColumnConfigsBasedOnCurrentOrder(columnConfigs);
        var addedColumns = _.filter(columnConfigs, function(config) {
            return !_.find(currentColumns, {dataIndex: config.dataIndex}) || Ext.isString(config);
        });

        return currentColumns.concat(addedColumns);
    },
    _applyStatefulColumns: function(columns) {
        if (this.alwaysShowDefaultColumns) {
            _.each(this.columnCfgs, function(columnCfg) {
                if (!_.any(columns, {dataIndex: this._getColumnName(columnCfg)})) {
                    columns.push(columnCfg);
                }
            }, this);
        }
        if (this.config && this.config.derivedColumns){
            this.columnCfgs = columns.concat(this.config.derivedColumns);
        } else {
            this.columnCfgs = columns;
        }
    }
});
Ext.define("TSApp", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    items: [
        {xtype:'container',itemId:'top_box',layout:{type:'hbox'},items: [{xtype:'container',itemId:'message_box',layout:{type:'hbox'}},
        {xtype:'container',itemId:'totals_box', layout:{type:'hbox',align: 'right'}}]},
        {xtype:'container',itemId:'display_box'}
    ],

    integrationHeaders : {
        name : "TSApp"
    },
    
    selectedPILevel: null,

    launch: function() {
        var me = this;
        console.log('in launch');
        me.fetchPortfolioItemTypes().then({
            success: function(records){
                //add UserStory
                records.push({'name':'UserStory','typePath':'hierarchicalrequirement'})
                me._addSelector(records);
            },
            scope:me
        });
        
    },

    _addSelector: function(records){
        var me = this;
        var store = Ext.create('Ext.data.Store', {
            fields: ['name', 'typePath'],
            data : records
        });        
        me.down('#message_box').add([
            {
                xtype: 'combobox',
                name: 'selectorType',
                itemId: 'selectorType',
                stateful: true,
                stateId: me.getContext().getScopedStateId('selectorType'),   
                fieldLabel: 'Select Artifact Type:',
                store: store,
                queryMode: 'local',
                displayField: 'name',
                valueField: 'typePath',
                margin: '10 10 10 10', 
                width: 450,
                labelWidth: 100
            },
            {
                xtype: 'rallybutton',
                text: 'Go',
                margin: '10 10 10 10',                
                cls: 'primary',
                listeners: {
                    click: me.updateView,
                    scope: me
                }
            }
        ]);

    },


    _getSelectedPIs: function(selectedPI,filters){
        var me = this;
        var config = {
                        model : selectedPI,
                        fetch : ['ObjectID','AcceptedLeafStoryPlanEstimateTotal','LeafStoryPlanEstimateTotal','PlanEstimate','ScheduleState'],
                        limit:'Infinity'
                    }
        if(filters){
            config['filters'] = filters;
        }
        return me._loadWsapiRecords(config);
    },

    _getTasks: function(filters){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;

        Ext.create('CArABU.technicalservices.chunk.Store',{
            storeConfig: {
                model: 'Task',
                fetch: ['ObjectID','TimeSpent','Estimate','ToDo'],
            },
            chunkProperty: 'WorkProduct.ObjectID',
            chunkValue: filters
        }).load().then({
            success: function(records){
                deferred.resolve(records);
            },
            failure: me.showErrorNotification,
            scope: me
        });

        return deferred.promise;

        // var me = this;
        // var config = {
        //                 model : 'Task',
        //                 fetch : ['ObjectID','TimeSpent','Estimate','ToDo'],
        //                 filters : Rally.data.wsapi.Filter.or(filters),
        //                 limit:'Infinity',
        //                 enablePostGet:true
        //             }
        // return me._loadWsapiRecords(config);
    },    


    updateView: function(){
        var me = this;

        if(!me.down('#selectorType')) return;

        me.selectedPILevel = [me.down('#selectorType').value];
        var pi_object_ids = [];

        me.setLoading(true);
        me._getSelectedPIs(me.selectedPILevel[0]).then({
            success: function(records){
                // console.log('_getSelectedPIs>>',records);
                Ext.Array.each(records,function(r){
                    pi_object_ids.push(r.get('ObjectID'));
                });


                me._getTasksFromSnapShotStore(pi_object_ids).then({
                    success: function(results){
                        // console.log('all taks from snapshot store',results);
                        // me.totalTaskEstimate = 0;
                        // me.totalToDo = 0;
                        me.lb_task_results = results[1];
                        var task_filter = [];
                        Ext.Array.each(results[1], function(task){
                            // task_filter.push({property:'WorkProduct.ObjectID',value:task.get('_ItemHierarchy')[task.get('_ItemHierarchy').length - 2]});
                            task_filter.push(task.get('_ItemHierarchy')[task.get('_ItemHierarchy').length - 2]);
                        });

                        me._getTasks(task_filter).then({
                            success: function(records){
                                console.log('_getTasks>>',records);
                                // me.totalTaskTimeSpent = 0;
                                me.taskTimeSpent = {}
                                Ext.Array.each(records,function(task){
                                    me.taskTimeSpent[task.get('ObjectID')] = task.get('TimeSpent') || 0;
                                });
                                Ext.create('Rally.data.wsapi.TreeStoreBuilder').build({
                                    models: me.selectedPILevel,
                                    enableHierarchy: true
                                }).then({
                                    success: me._addGrid,
                                    scope: me
                                });

                            },
                            scope: me
                        });

                    },
                    scope: me
                });

            },
            scope: me         
        });

    },

    _updateAssociatedData: function(store, node, records, success){
        var me = this;
        me.suspendLayouts();
        Ext.Array.each(records,function(r){

            var totalEstimate = 0;
            var totalTimeSpent = 0;
            var totalToDo = 0;
            var totalDiff = 0;
            Ext.Array.each(me.lb_task_results,function(lbTask){
                if(Ext.Array.contains(lbTask.get('_ItemHierarchy'),r.get('ObjectID'))){
                    totalEstimate += lbTask.get('Estimate') || 0; //Ext.Number.toFixed(totalEstimate,2)
                    totalToDo +=  lbTask.get('ToDo') || 0;
                    totalTimeSpent += me.taskTimeSpent[lbTask.get('ObjectID')] || 0;
                }
            });

            totalTimeSpent = isNaN(Ext.util.Format.round(totalTimeSpent,2)) ? 0 :  Ext.util.Format.round(totalTimeSpent,2);  
            totalDiff = isNaN(Ext.util.Format.round((totalEstimate - totalTimeSpent),2)) ? 0 :  Ext.util.Format.round((totalEstimate - totalTimeSpent),2);  

            r.set('Estimate', Ext.util.Format.round(totalEstimate,2));
            r.set('TimeSpent', Ext.util.Format.round(totalTimeSpent,2));
            r.set('ToDo', totalToDo);
            r.set('Diff', totalDiff);
        });
        me.resumeLayouts();
    },


    _getTasksFromSnapShotStore:function(piObjectIDs){
        var me = this;
        var deferred = Ext.create('Deft.Deferred');

        var find = {
                        "_TypeHierarchy": "Task",
                        "_ItemHierarchy": { $in: piObjectIDs }
                    };
        find["__At"] = "current";

        var snapshotStore = Ext.create('Rally.data.lookback.SnapshotStore', {
            "fetch": [ "ObjectID","Estimate","TimeSpent","_ItemHierarchy","ToDo"],
            "find": find,
            "useHttpPost": true
            // ,
            // "removeUnauthorizedSnapshots":true
        });

        snapshotStore.load({
            callback: function(records, operation) {
                console.log('operation>>',operation);
                if(operation.wasSuccessful()){
                    deferred.resolve([piObjectIDs,records]);
                }else{
                    if(operation.error.status === 403) {
                        me.showErrorNotification('You do not have required permissions to access the data.');
                    }else{
                        me.showErrorNotification('Problem Loading');
                    }
                    me.setLoading(false);
                }
                
            },
            scope:me
        });
    
        return deferred;
    },

    showErrorNotification: function(msg){
        Rally.ui.notify.Notifier.showError({message: msg});
    },

       
    _loadWsapiRecords: function(config){
        console.log('_loadWsapiRecords',config);
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        var default_config = {
            model: 'Defect',
            fetch: ['ObjectID']
        };
        // this.logger.log("Starting load:",config.model);
        Ext.create('Rally.data.wsapi.Store', Ext.Object.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(records);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },

    _loadAStoreWithAPromise: function(model_name, model_fields){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        this.logger.log("Starting load:",model_name,model_fields);
          
        Ext.create('Rally.data.wsapi.Store', {
            model: model_name,
            fetch: model_fields
        }).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(this);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },

    _addTotals:function(grid) {
        var me = this;
        // var filters = me.down('#pigridboard') && me.down('#pigridboard').gridConfig.store.filters.items[0];
        var filters = grid && grid.gridConfig.store.filters.items[0];
        var allPi;
        me.setLoading('Loading totals...');
            me._getSelectedPIs(me.selectedPILevel[0],filters).then({
                success: function(records){
                    me.totalLeafStoryPlanEstimateTotal = 0;
                    me.totalAcceptedLeafStoryPlanEstimateTotal = 0;  
                    me.totalTaskEstimate = 0;
                    me.totalTaskTimeSpent = 0;
                    me.totalTaskToDo = 0;
                    me.totalDiff = 0;
                    Ext.Array.each(records,function(r){
                        var totalEstimate = 0;
                        var totalTimeSpent = 0;
                        var totalToDo = 0;
                        if(me.selectedPILevel[0]=='hierarchicalrequirement'){
                            me.totalLeafStoryPlanEstimateTotal += r.get('PlanEstimate') || 0;
                            if(me.selectedPILevel[0]=='hierarchicalrequirement' && r.get('ScheduleState') == 'Accepted'){
                                me.totalAcceptedLeafStoryPlanEstimateTotal += r.get('PlanEstimate') || 0;  
                            }
                        }else{
                            me.totalLeafStoryPlanEstimateTotal += r.get('LeafStoryPlanEstimateTotal') || 0;
                            me.totalAcceptedLeafStoryPlanEstimateTotal += r.get('AcceptedLeafStoryPlanEstimateTotal') || 0;                
                        }

                        Ext.Array.each(me.lb_task_results,function(lbTask){
                            if(Ext.Array.contains(lbTask.get('_ItemHierarchy'),r.get('ObjectID'))){
                                totalEstimate += lbTask.get('Estimate') || 0; 
                                totalToDo += lbTask.get('ToDo') || 0; 
                                totalTimeSpent += me.taskTimeSpent[lbTask.get('ObjectID')];
                            }
                        });

                        me.totalTaskEstimate += totalEstimate || 0;
                        me.totalTaskTimeSpent += totalTimeSpent || 0;
                        me.totalTaskToDo += totalToDo || 0;

                    });

                    me.totalDiff = me.totalTaskEstimate - me.totalTaskTimeSpent;


                    me.down('#totals_box').removeAll();

                    Ext.create('Ext.data.Store', {
                        storeId:'totalStore',
                        fields:['TotalTaskEstimate', 'TotalTimeSpent','TotalDiff','TotalTaskToDo', 'LeafStoryPlanEstimateTotal','AcceptedLeafStoryPlanEstimateTotal'],
                        data:{'items':[
                            { 'TotalTaskEstimate': Ext.Number.toFixed(me.totalTaskEstimate,2) +' Hours', 'TotalTimeSpent':Ext.Number.toFixed(me.totalTaskTimeSpent,2) +' Hours',  'TotalDiff': Ext.Number.toFixed(me.totalDiff,2) +' Hours', 'TotalTaskToDo': Ext.Number.toFixed(me.totalTaskToDo,2) +' Hours','LeafStoryPlanEstimateTotal':Ext.Number.toFixed(me.totalLeafStoryPlanEstimateTotal,0),'AcceptedLeafStoryPlanEstimateTotal':Ext.Number.toFixed(me.totalAcceptedLeafStoryPlanEstimateTotal,0) },
                        ]},
                        proxy: {
                            type: 'memory',
                            reader: {
                                type: 'json',
                                root: 'items'
                            }
                        }
                    });

                    me.down('#totals_box').add({
                        xtype: 'grid',
                        title: 'Totals',
                        header:{
                            style: {
                                background: 'grey',
                                'color': 'white',
                                'font-weight': 'bold'
                            }
                        },
                        store: Ext.data.StoreManager.lookup('totalStore'),
                        columns: [
                            { text: 'Total Task Estimate',  dataIndex: 'TotalTaskEstimate', flex:4},
                            { text: 'Total Time Spent', dataIndex: 'TotalTimeSpent', flex:4 },
                            { text: 'Diff (Estimate - TimeSpent)', dataIndex: 'TotalDiff', flex:5 },
                            { text: 'Total ToDo', dataIndex: 'TotalTaskToDo', flex:2 },
                            { text: 'Leaf Story PlanEstimate Total', dataIndex: 'LeafStoryPlanEstimateTotal' , flex:4},
                            { text: 'Accepted Leaf Story PlanEstimate Total', dataIndex: 'AcceptedLeafStoryPlanEstimateTotal' , flex:4}
                        ],
                        width:600
                    });
                    me.setLoading(false);
                },
                scope:me
            });

 
    },

    _addGrid: function (store) {

        var me = this;
        var context = me.getContext();
        store.on('load', me._updateAssociatedData, me);
        
        me.down('#display_box').removeAll();
        
        me.down('#display_box').add({
                  itemId: 'pigridboard',
                  xtype: 'rallygridboard',
                  context: context,
                  modelNames: me.selectedPILevel,
                  toggleState: 'grid',
                  stateful: false,
                  plugins: me._getPlugins(),
                  gridConfig: {
                    store: store,
                    enableEditing: false,
                    columnCfgs: me._getColumnCfgs(),
                    derivedColumns: me.getDerivedColumns(),
                    shouldShowRowActionsColumn:false,
                    enableRanking: false,
                    enableBulkEdit: false
                  },
                  listeners: {
                    load: me._addTotals,
                    scope: me
                  },
                  height: me.getHeight()
              });

        me.setLoading(false);
    },

    _getPlugins: function(){
        var me = this;
        models = me.selectedPILevel;

        var plugins = [
        {
                ptype: 'rallygridboardinlinefiltercontrol',
                inlineFilterButtonConfig: {
                    stateful: true,
                    stateId: me.getContext().getScopedStateId('filters'),
                    modelNames: models,
                    inlineFilterPanelConfig: {
                        collapsed: false,
                        quickFilterPanelConfig: {
                            defaultFields: ['ArtifactSearch', 'Owner'],
                            addQuickFilterConfig: {
                                whiteListFields: ['Milestones', 'Tags']
                            }
                        },
                        advancedFilterPanelConfig: {
                            advancedFilterRowsConfig: {
                                propertyFieldConfig: {
                                    whiteListFields: ['Milestones', 'Tags']
                                }
                            }
                        }  
                    }                  
                },
                
        }
        ];

        plugins.push({
            ptype: 'rallygridboardfieldpicker',
            headerPosition: 'left',
            modelNames: models,
            stateful: true,
            gridAlwaysSelectedValues: ['Name','Owner','Estimate','TimeSpent','ToDo','LeafStoryPlanEstimateTotal','PlanEstimate','AcceptedLeafStoryPlanEstimateTotal'],
            stateId: me.getContext().getScopedStateId('field-picker')
        });

        return plugins;        
    },

    _getColumnCfgs: function(){
        var me = this;

        return  [{
            dataIndex: 'Name',
            text: 'Name'
        },
        {
            dataIndex: 'ScheduleState',
            text: 'Schedule State'
        },
        {
            dataIndex: 'Owner',
            text: 'Owner'
        },
        {
            dataIndex: 'Estimate',
            text: 'Task Estimate'
        },
        {
            dataIndex: 'ToDo',
            text: 'To Do'
        },
        {
            dataIndex: 'TimeSpent',
            text: 'Task Time Spent'
        },
        {
            dataIndex: 'LeafStoryPlanEstimateTotal',
            text: 'LeafStory Plan Estimate Total'
        },
        {
            dataIndex: 'PlanEstimate',
            text: 'Plan Estimate'
        },
        {
            dataIndex: 'AcceptedLeafStoryPlanEstimateTotal',
            text: 'Accepted LeafStory Plan Estimate Total'
        }].concat(me.getDerivedColumns());
    },

    getDerivedColumns: function(){
        return [{
            tpl: '<div style="text-align:right;">{Diff}</div>',
            text: 'Diff (Estimate – Timespent)',
            xtype: 'templatecolumn'
        }];
    },

    fetchPortfolioItemTypes: function(){
        var deferred = Ext.create('Deft.Deferred');
        var store = Ext.create('Rally.data.wsapi.Store', {
            model: 'TypeDefinition',
            fetch: ['TypePath', 'Ordinal','Name'],
            filters: [
                {
                    property: 'Parent.Name',
                    operator: '=',
                    value: 'Portfolio Item'
                },
                {
                    property: 'Creatable',
                    operator: '=',
                    value: 'true'
                }
            ],
            sorters: [{
                property: 'Ordinal',
                direction: 'DESC'
            }]
        });
        store.load({
            callback: function(records, operation, success){
                if (success){
                    var portfolioItemTypes = [];
                    Ext.Array.each(records, function(d){
                        portfolioItemTypes.push({ typePath: d.get('TypePath'), name: d.get('Name') });
                    });
                    deferred.resolve(portfolioItemTypes);
                } else {
                    var error_msg = '';
                    if (operation && operation.error && operation.error.errors){
                        error_msg = operation.error.errors.join(',');
                    }
                    deferred.reject('Error loading Portfolio Item Types:  ' + error_msg);
                }
            }
        });
        return deferred.promise;
    },
 
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    }
    
});

            
               Rally.launchApp('TSApp', {
                   name: 'Portfolio Reporting App'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>