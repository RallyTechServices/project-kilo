<!DOCTYPE html>
<html>
<head>
    <title>Portfolio Reporting App</title>
    <!--  (c) 2017 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Thu Mar 02 2017 12:26:53 GMT-0800 (PST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Thu Mar 02 2017 12:26:53 GMT-0800 (PST)";
        var STORY    = "US";
        var BUILDER  = "arajaraman";
        var CHECKSUM = 20249161366;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>
    <!-- our highcharts (needed so that we can add patterns) 
    <script type="text/javascript" src="/apps/2.1/lib/analytics/analytics-all.js"></script>
    -->
    
    
    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350,
    
    informationalConfig: null,
    
    items: [{xtype:'container', itemId:'information' }],
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/var BUILDER  = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
       
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
   
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    var stored_checksum = me._generateChecksum(text);
                    if ( CHECKSUM !== stored_checksum ) {
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    _addToContainer: function(container){
        var config = Ext.apply({
            xtype:'container',
            height: 200,
            overflowY: true
        }, this.informationalConfig);
        
        container.add(config);
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if ( !Ext.isEmpty( this.informationalConfig ) ) {
            var container = this.down('#information');
            this._addToContainer(container);
            
        }
        
        if (! app.isExternal() ) {
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            dock: 'bottom',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml,
                doc: 'top'
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            dock:'bottom',
            html:"This app was created by the CA AC Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            var build_html = Ext.String.format("Built on: {0} <br/>Built by: {1}",
                APP_BUILD_DATE,
                BUILDER);
                
            if ( STORY ) {
                build_html = build_html + "<br/>Source story: " + STORY;
            }
                
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html: build_html
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('CArABU.technicalservices.chunk.Store',{

    MAX_CHUNK_SIZE: 50,
    logger: new Rally.technicalservices.Logger(),

    constructor: function(config) {
        this.chunkProperty = config.chunkProperty;
        this.chunkValue = config.chunkValue;

        this.storeConfig = config.storeConfig || {};
        this.storeType = config.storeType || 'Rally.data.wsapi.Store';

    },
    load: function(){
        var deferred = Ext.create('Deft.Deferred');

        var promises = [],
            chunkArray = this.chunkValue,
            config = this.storeConfig;

        for (var i=0; i < chunkArray.length; i = i+this.MAX_CHUNK_SIZE){
            var chunk = Ext.Array.slice(chunkArray, i, i + this.MAX_CHUNK_SIZE);
            promises.push(this._fetchChunk(chunk, config));
        }

        Deft.Promise.all(promises).then({
            success: function(results){
                var records = _.flatten(results);
                this.logger.log('load SUCCESS results', results,records);
                deferred.resolve(records);
            },
            failure: function(msg){
                this.logger.log('load FAILURE', chunkArray, msg);
                deferred.reject(msg);
            },
            scope: this
        });


        return deferred;
    },

    _fetchChunk: function(objectIDs, config){
        this.logger.log('chunk.Store._fetchChunk',objectIDs, config);
        var deferred = Ext.create('Deft.Deferred');

        var chunkProperty = this.chunkProperty,
            filters = _.map(objectIDs, function(o){ return {
                property: chunkProperty,
                value: o
            }
        });
        filters = Rally.data.wsapi.Filter.or(filters);


        if (config.filters){
            if (Ext.isArray(config.filters)){
                config.filters  = Rally.data.wsapi.Filter.and(config.filters);
            }
            filters = filters.and(config.filters);
        }
        this.logger.log('chunk.Store._fetchChunk',filters.toString());

        var fetch = config.fetch || true,
            model = config.model || 'HierarchicalRequirement';

        Ext.create(this.storeType,{
            fetch: fetch,
            filters: filters,
            model: model,
            context: {project: null}
        }).load({
            callback: function(records, operation, success){
                if (success){
                    deferred.resolve(records);
                } else {
                    var msg = "Failure loading records for objectIDs: " + objectIDs.join(', ') + ":  " + operation.error.errors.join(',');
                    deferred.resolve(msg);
                }
            }
        });
        return deferred;
    }

});
Ext.override(Rally.data.wsapi.TreeStore,{
    _decorateModels: function() {
        var models = this.model;

        if (_.isFunction(models.getArtifactComponentModels)) {
            models = models.getArtifactComponentModels();
        }

        Ext.Array.each(models, function(m){
            if (m.typePath.indexOf("portfolioitem/") != -1){
                m.addField({name: 'PlanEstimate', type: 'auto', defaultValue: null, modelType: m.typePath});
                m.addField({name: 'Estimate', type: 'auto', defaultValue: null, modelType: m.typePath});
                m.addField({name: 'TimeSpent', type: 'auto', defaultValue: null, modelType: m.typePath});
            }
            if (m.typePath.indexOf("hierarchicalrequirement") != -1){
                m.addField({name: 'Estimate', type: 'auto', defaultValue: null, modelType: m.typePath});
                m.addField({name: 'TimeSpent', type: 'auto', defaultValue: null, modelType: m.typePath});
            }            
        });

        _.each(Ext.Array.from(models), Rally.ui.grid.data.NodeInterface.decorate, Rally.ui.grid.data.NodeInterface);
    }
});

Ext.override(Rally.ui.grid.TreeGrid, {
    _mergeColumnConfigs: function(newColumns, oldColumns) {

        var mergedColumns= _.map(newColumns, function(newColumn) {
            var oldColumn = _.find(oldColumns, {dataIndex: this._getColumnName(newColumn)});
            if (oldColumn) {
                return this._getColumnConfigFromColumn(oldColumn);
            }

            return newColumn;
        }, this);
        mergedColumns = mergedColumns.concat(this.config.derivedColumns);
        return mergedColumns;
    },
    _getColumnConfigsBasedOnCurrentOrder: function(columnConfigs) {
        var cols = _(this.headerCt.items.getRange()).map(function(column) {
            //override:  Added additional search for column.text
            return _.contains(columnConfigs, column.dataIndex) ? column.dataIndex : _.find(columnConfigs, {xtype: column.xtype, text: column.text });
        }).compact().value();

        return cols;
    },
    _restoreColumnOrder: function(columnConfigs) {

        var currentColumns = this._getColumnConfigsBasedOnCurrentOrder(columnConfigs);
        var addedColumns = _.filter(columnConfigs, function(config) {
            return !_.find(currentColumns, {dataIndex: config.dataIndex}) || Ext.isString(config);
        });
        return currentColumns.concat(addedColumns);
    },
    _applyStatefulColumns: function(columns) {
        if (this.alwaysShowDefaultColumns) {
            _.each(this.columnCfgs, function(columnCfg) {
                if (!_.any(columns, {dataIndex: this._getColumnName(columnCfg)})) {
                    columns.push(columnCfg);
                }
            }, this);
        }

        if (this.config && this.config.derivedColumns){
            this.columnCfgs = columns.concat(this.config.derivedColumns);
        } else {
            this.columnCfgs = columns;
        }

    }
});

// Ext.override(Rally.ui.renderer.RendererFactory, {

//     typeFieldTemplates: {
//         hierarchicalrequirement: {
//             Estimate: function(field){
//                 return 5;
//             },
//             TimeSpent: function(field){
//                 return 5;
//             },            
//         }
//     }

// });

Ext.override(Rally.data.wsapi.TreeStore, {
    _getChildNodeFilters: function(node) {
        var parentType = node.self.typePath,
            childTypes = this._getChildTypePaths([parentType]),
            parentFieldNames = this._getParentFieldNames(childTypes, parentType);
        //console.log('_getChildNodeFilters', node, this.childFilters, parentType);
        if (parentFieldNames.length) {
            var filters =  Rally.data.wsapi.Filter.or(_.map(parentFieldNames, function(parentFieldName) {
                return {
                    property: parentFieldName,
                    operator: '=',
                    value: node.get('_ref')
                };
            }));
            if (this.childFilters && this.childFilters[parentType]){
                return [filters.and(this.childFilters[parentType])];
            }
            return [filters];
        }
        return [];
    }
});

Ext.override(Rally.ui.grid.plugin.TreeGridChildPager, {
    _storeHasMoreChildPages: function(parentRecord) {
        var loadedCount = this._getLoadedCount(parentRecord);
        var childPageSize = this.cmp.getStore().getChildPageSize(parentRecord);
        return parentRecord.get('leafCount') > loadedCount && loadedCount >= childPageSize;
    }
});

Ext.override(Rally.ui.grid.TreeView, {
    _expandHandler: function(node, children){
        if (this.getTreeStore().getRootNode() !== node && children.length === 0){
            this.refresh(); //treegrid freaks out when it tries to expand a node that has no children, so force a refresh
            if (!this.getTreeStore().hasErrors()){
                Rally.ui.notify.Notifier.showWarning({message:node.get('FormattedID') + ' may have children that are not displayed due to the Feature Query Filter in the App Settings.'});
            }
        }
    },
});
Ext.define('Rally.ui.renderer.template.progressbar.StoryPercentDoneTemplate', {
    requires: [
        'Rally.util.HealthColorCalculator'
    ],
    extend: 'Rally.ui.renderer.template.progressbar.ProgressBarTemplate',

    config: {
        /**
         * @cfg {String}
         * define a height if necessary to fit where it's being used
         */
        height:'15px',

        calculateColorFn: function(recordData) {
            var today = new Date();
            var config = {
                percentComplete: recordData[this.percentDoneName],
                startDate: recordData[this.startDateField] || today,
                endDate: recordData[this.endDateField] || today,
                asOfDate: today
            };

            config.inProgress = config.percentComplete > 0;
            return Rally.util.HealthColorCalculator.calculateHealthColor(config).hex;
        },

        isClickable: true,
        /**
         * @cfg {Boolean}
         * If the percent done is 0%, do not show the bar at all
         */
        showOnlyIfInProgress: false

    },

    constructor: function(config) {
        this.initConfig(config);
        return this.callParent(arguments);
    }
});

/**
 * The Ext.XTemplate used to render the percent done component and column in the grid.
 */
Ext.define('Rally.ui.renderer.template.progressbar.StoryPercentDoneByStoryPlanEstimateTemplate', {
    requires: [],
    extend: 'Rally.ui.renderer.template.progressbar.StoryPercentDoneTemplate',

    config: {
        /**
         * @cfg {String}
         * sometimes it's necessary to name the variable used as the percent done replacement in the template,
         * like in a grid when a record is used to render the template.
         */
        percentDoneName: 'PercentDoneByStoryPlanEstimate',

        /**
         * @cfg {Function}
         * A function that should return true to show a triangle in the top right to denote something is missing.
         * Defaults to:
         *      function(){ return false; }
         */
        showDangerNotificationFn: function (recordData) {
            var summary = recordData._summary || {};

            return !summary.endDate || !summary.startDate ||
                summary.unestimatedLeafStories > 0;
        }
    }
});

Ext.define('Rally.ui.renderer.template.progressbar.StoryPercentDoneByStoryCountTemplate', {
    requires: [],
    extend: 'Rally.ui.renderer.template.progressbar.StoryPercentDoneTemplate',

    config: {

        /**
         * @cfg {String}
         * sometimes it's necessary to name the variable used as the percent done replacement in the template,
         * like in a grid when a record is used to render the template.
         */
        percentDoneName: 'PercentDoneByStoryCount',
        /**
         * @cfg {Function}
         * A function that should return true to show a triangle in the top right to denote something is missing.
         * Defaults to:
         *      function(){ return false; }
         */
        showDangerNotificationFn: function (recordData) {
            var summary = recordData._summary || {};
            return !summary.endDate || !summary.startDate;
        }
    }
});
Ext.define("TSApp", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    items: [
        {xtype:'container',itemId:'message_box',layout:{type:'hbox'}},
        {xtype:'container',itemId:'filter_box'},        
        {xtype:'container',itemId:'display_box'}
    ],

    integrationHeaders : {
        name : "TSApp"
    },
    
    selectedPILevel: ['PortfolioItem/Feature'],

    modelNames: ['PortfolioItem','HierarchicalRequirement','Task'],

    launch: function() {
        var me = this;
        console.log(me._getSelectedColumns());
        me._addSelector();
    },

    _addSelector: function(){
        var me = this;
        me.down('#message_box').add([{
                name: 'selectorType',
                itemId: 'selectorType',
                fieldLabel: 'Select PI Type:',
                width: 450,
                labelWidth: 100,
                margin: '10 10 10 10',                
                xtype: 'rallyportfolioitemtypecombobox',
                valueField: 'TypePath',
                readyEvent: 'ready'
                ,
                listeners: {
                    ready: function() {
                        //me._updateGrid([]);
                        me.updateView([]);
                    },
                    change: function(){
                        //me._updateGrid([]);
                        me.updateView([]);
                    },
                    scope: me
                }
            },
            {
                xtype: 'rallyfieldpicker',
                name: 'columnNames',
                itemId: 'columnNames',
                fieldLabel: 'Choose Fields',
                width: 250,
                margin: '10 10 10 10',    
                autoExpand: false,
                alwaysExpanded: false,
                modelTypes: me.modelNames,
                alwaysSelectedValues: me._getSelectedColumns(),
                fieldBlackList: ['Attachments','Children'],
                listeners:{
                    select: function(){
                        //me._updateGrid([]);
                        me.updateView([]);

                    },
                    scope:me
                }
            },
            {
                xtype: 'rallyinlinefiltercontrol',
                name: 'inlineFilter',
                itemId: 'inlineFilter',
                margin: '10 10 10 10',                           
                context: me.getContext(),
                height:26,
                inlineFilterButtonConfig: {
                    stateful: true,
                    stateId: me.getContext().getScopedStateId('inline-filter'),
                    context: me.getContext(),
                    modelNames: ['PortfolioItem'],
                    filterChildren: false,
                    inlineFilterPanelConfig: {
                        quickFilterPanelConfig: {
                            defaultFields: ['ArtifactSearch', 'Owner']
                        }
                    },
                    listeners: {
                        inlinefilterchange: me._onFilterChange,
                        inlinefilterready: me._onFilterReady,
                        scope: me
                    } 
                }
            }
        ]);

    },

    _onFilterChange: function(inlineFilterButton){
        var me = this;
        var filters = inlineFilterButton.getTypesAndFilters().filters;
        me.updateView(filters);
    },

    _onFilterReady: function(inlineFilterPanel) {
        var me = this;
        me.down('#filter_box').add(inlineFilterPanel);
    },


    _getSelectedPIs: function(selectedPI){
        var me = this;
        var config = {
                        model : selectedPI,
                        fetch : ['ObjectID'],
                        //filters : Rally.data.wsapi.Filter.or(story_filters),
                        limit:'Infinity'
                    }
        return me._loadWsapiRecords(config);
    },

    updateView: function(filters){
        var me = this;
        me.selectedPILevel = [me.down('#selectorType').getValue()];

        var pi_object_ids = [];

        me.totalTaskEstimate = 0;
        me.totalTaskTimeSpent = 0;        

        me._getSelectedPIs(me.selectedPILevel[0]).then({
            success: function(records){
                Ext.Array.each(records,function(pi){
                    pi_object_ids.push(pi.get('ObjectID'));
                });
                
                console.log('all pi objectids',pi_object_ids);
                me._getTasksFromSnapShotStore(pi_object_ids).then({
                    success: function(results){
                        console.log('all taks from snapshot store',results);
                        me.lb_task_results = results[1];
                        Ext.Array.each(results[1],function(task){
                            me.totalTaskEstimate += task.get('Estimate') || 0;
                            me.totalTaskTimeSpent += task.get('TimeSpent') || 0;
                        });
                        //add tree grid
                        Ext.create('Rally.data.wsapi.TreeStoreBuilder').build({
                            models: me.selectedPILevel,
                            autoLoad: true,
                            enableHierarchy: true,
                            filters: filters
                        }).then({
                            success: me._addGrid,
                            scope: me
                        });

                    },
                    scope: me
                });

            },
            scope: me         
        });

    },


    getFeatureName: function(){
        return 'Feature';
    },

    updateAssociatedData: function(store, node, records, success){
        var me = this;
        //me.setLoading("Loading..");
        this.logger.log('updateAssociatedData', store, node, records, success);

        Ext.Array.each(records,function(r){
            var totalEstimate = 0;
            var totalTimeSpent = 0;            
            Ext.Array.each(me.lb_task_results,function(lbTask){
                if(Ext.Array.contains(lbTask.get('_ItemHierarchy'),r.get('ObjectID'))){
                    totalEstimate += lbTask.get('Estimate') || 0;
                    totalTimeSpent += lbTask.get('TimeSpent') || 0;                    
                }
            });
            r.set('Estimate',totalEstimate);
            r.set('TimeSpent',totalTimeSpent);
        });


        // var promises = []; 
        // Ext.Array.each(records, function(r){
        //     promises.push(me._getTasksFromSnapShotStore([r.get('ObjectID')]));
        // });

        // //Task Estimates & TimeSpent from lookback
        // Deft.Promise.all(promises,me).then({
        //     success: function(results){
        //         console.log('tasks>> promises',results);
        //         Ext.suspendLayouts();
        //         Ext.Array.each(records,function(rec){
        //             Ext.Array.each(results,function(res){
        //                 if(rec.get('ObjectID') == res[0]){
        //                     var totalEstimate = 0;
        //                     var totalTimeSpent = 0;
        //                     Ext.Array.each(res[1],function(lbRec){
        //                         totalEstimate += lbRec.get('Estimate') || 0;
        //                         totalTimeSpent += lbRec.get('TimeSpent') || 0;
        //                     });
    
        //                     rec.set('Estimate',totalEstimate);
        //                     rec.set('TimeSpent',totalTimeSpent);
        //                 }
        //             });
        //         });
        //         Ext.resumeLayouts(true);
        //     },
        //     scope: me
        // });

    },


    _getTasksFromSnapShotStore:function(piObjectIDs){
        var me = this;
        var deferred = Ext.create('Deft.Deferred');

        var find = {
                        "_TypeHierarchy": "Task",
                        "_ItemHierarchy": { $in: piObjectIDs }
                    };
        find["__At"] = "current";

        var snapshotStore = Ext.create('Rally.data.lookback.SnapshotStore', {
            "fetch": [ "ObjectID","Estimate","TimeSpent","_ItemHierarchy"],
            "find": find,
            "useHttpPost": true
        });

        snapshotStore.load({
            callback: function(records, operation) {
                deferred.resolve([piObjectIDs,records]);
            },
            scope:this
        });
    
        return deferred;
    },

    showErrorNotification: function(msg){
        Rally.ui.notify.Notifier.showError({message: msg});
    },

       
    _loadWsapiRecords: function(config){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        var default_config = {
            model: 'Defect',
            fetch: ['ObjectID']
        };
        this.logger.log("Starting load:",config.model);
        Ext.create('Rally.data.wsapi.Store', Ext.Object.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(records);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },

    _loadAStoreWithAPromise: function(model_name, model_fields){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        this.logger.log("Starting load:",model_name,model_fields);
          
        Ext.create('Rally.data.wsapi.Store', {
            model: model_name,
            fetch: model_fields
        }).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(this);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },

    _addGrid: function (store) {
        var me = this;
        console.log('Tree store',store);
        store.on('load', me.updateAssociatedData, me);
        console.log('columns ',me.getValue());
        me.down('#display_box').removeAll();
        me.down('#display_box').add({
            xtype: 'rallytreegrid',
            context: this.getContext(),
            store: store,
            enableSummaryRow:true,
            columnCfgs: me._getAllColumns(),
            height: this.getHeight()
        });
        me.setLoading(false);

    },

    getValue: function() {
        var value = {};
        Ext.Array.each(Ext.ComponentQuery.query('rallyfieldpicker',this), function(picker) {
            var fields = picker.getValue(); 
            
            value[picker._key] = Ext.Array.map(fields, function(field){
                return field.get('name');
            });
        });
        
        return Ext.JSON.encode(value);
    },

    _getAllColumns: function(){
        var me = this;
        var allColumns = me._getColumnCfgs();
        var selectedValues = me.down('#columnNames') && me.down('#columnNames').selectedValues.keys;
        var alwaysSelectedValues = me._getSelectedColumns();
        Ext.Array.each(selectedValues,function(val){
            if(!Ext.Array.contains(alwaysSelectedValues,val)){
                allColumns.push({dataIndex:val,text:val});
            }
        });
        return allColumns;
    },

    _getColumnCfgs: function(){
        var me = this;
        console.log('selectedValues>>',me.down('#columnNames') && me.down('#columnNames').selectedValues.keys);
        console.log('Allowed Values>>',me.down('#columnNames') && me.down('#columnNames').alwaysSelectedValues);

        return  [{
            dataIndex: 'Name',
            text: 'Name'
        },
        {
            dataIndex: 'ScheduleState',
            text: 'Schedule State'
        },
        {
            dataIndex: 'Owner',
            text: 'Owner'
        },
        {
            dataIndex: 'Estimate',
            text: 'Task Estimate',
            summaryType: 'sum',
            renderer: function(Estimate){
                return Estimate || 0;
            },
            summaryRenderer: function() {
                return '<span class="rollup">'+ me.totalTaskEstimate +' Hours</span>';
            }
        },
        {
            dataIndex: 'TimeSpent',
            text: 'Task Time Spent',
            summaryType: 'sum',
            renderer: function(TimeSpent){
                return TimeSpent || 0;
            },            
            summaryRenderer: function() {
                return '<span class="rollup">'+ me.totalTaskTimeSpent +' Hours</span>';
            }
        },
        {
            dataIndex: 'LeafStoryPlanEstimateTotal',
            text: 'LeafStory Plan Estimate Total',
            summaryType: 'sum'
            //,
            // summaryRenderer: function() {
            //     return '<b>' + me.totalLeafStoryPlanEstimateTotal +'</b>';
            // }
        },
        {
            dataIndex: 'PlanEstimate',
            text: 'Plan Estimate'
        },
        {
            dataIndex: 'AcceptedLeafStoryPlanEstimateTotal',
            text: 'Accepted LeafStory Plan Estimate Total',
            summaryType: 'sum'
            ,
            summaryRenderer: function(AcceptedLeafStoryPlanEstimateTotal) {
                return '<span class="rollup">'+ AcceptedLeafStoryPlanEstimateTotal +' Points </span>';;
            }
        }];
    },

    _getSelectedColumns: function(){
        var me = this;
        var cols = [];
        Ext.Array.each(me._getColumnCfgs(),function(col){
            cols.push(col.dataIndex);
        });
        console.log('_getSelectedColumns>>', cols)
        return cols;
    },
 
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    }
    
});

            
               Rally.launchApp('TSApp', {
                   name: 'Portfolio Reporting App'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>